# INVALID SYNTAX ERROR MESSAGES
test_out "Test empty program", "", "Error: Program is empty.\n"

test_out "Test incomplete string", "\"incompl", "Error: Reached EOF while parsing a string.\n"

test_out "Test incomplete list 1", "(", "Error: Reached EOF while parsing a list.\n"
test_out "Test incomplete list 2", "(foo", "Error: Reached EOF while parsing function call.\n"
test_out "Test incomplete list 3", "(foo bar", "Error: Reached EOF while parsing function call.\n"

test_out "Test incomplete definition 1", "(define", "Error: Reached EOF while parsing a definition.\n"
test_out "Test incomplete definition 2", "(define (", "Error: Missing function name in definition.\n"

test_out "Test invalid function definition 1", "(define (1) foo)", "Error: Missing function name in definition.\n"
test_out "Test invalid function definition 2", "(define () bar)", "Error: Missing function name in definition.\n"

test_out "Test invalid variable name in definition", "(define 3.14", "Error: Expected symbol as first argument of define.\n"

test_out "Test missing expression in definition 1", "(define foo)", "Error: Missing expression in variable definition.\n"
test_out "Test missing expression in definition 2", "(define foo", "Error: Expected expression.\n"

test_out "Test incomplete argument list", "(define (foo bar", "Error: Reached EOF while parsing a list.\n"

test_out "Test invalid expression in argument list 1", "(define (foo \"bar\") #t)", "Error: Invalid expression in argument list. Only symbols are allowed.\n"
test_out "Test invalid expression in argument list 2", "(lambda (2))", "Error: Invalid expression in argument list. Only symbols are allowed.\n"
test_out "Test invalid expression in argument list 3", "(lambda (\"arg\"))", "Error: Invalid expression in argument list. Only symbols are allowed.\n"

test_out "Test incomplete binding list", "(let ((a)) #f)", "Error: Binding list must have exactly two elements: id, expression.\n"

test_out "Test invalid expression in binding list", "(let ((2 foo)) null)", "Error: First element of binding list must be a symbol.\n"

test_out "Test incomplete body 1", "(let ((foo 2)))", "Error: Missing expression at the end of a body.\n"
test_out "Test incomplete body 2", "(let ((foo 2))", "Error: Reached EOF while parsing a body.\n"
test_out "Test incomplete body 3", "(let ((foo 2)) foo", "Error: Reached EOF while parsing a body.\n"
test_out "Test incomplete body 4", "(lambda ())", "Error: Missing expression at the end of a body.\n"
test_out "Test incomplete body 5", "(define (foo a b c) (+ a b c) (define d a))", "Error: Missing expression at the end of a body.\n"

test_out "Test empty quote", "(quote)", "Error: Expected atom or list to quote.\n"
test_out "Test incomplete quote", "(quote define", "Error: Expected token \")\".\n"

test_out "Test empty lambda", "(lambda)", "Error: Expected token \"(\".\n"

test_out "Test incomplete lambda", "(lambda ()", "Error: Reached EOF while parsing a body.\n"

test_out "Test empty if", "(if)", "Error: Missing condition expression.\n"
test_out "Test missing then expression in if", "(if (< 2 3))", "Error: Missing then expression.\n"
test_out "Test missing else expression in if", "(if (< 2 3) #t)", "Error: Missing else expression.\n"

test_out "Test empty list", "()", "Error: Missing function expression or syntax keyword.\n"

test_out "Test incomplete function call", "(foo bar", "Error: Reached EOF while parsing function call.\n"
test_out "Test unexpected keyword at first list position", "(null)", "Error: Unexpected keyword at first list position.\n"

test_out "Test definition inside expression", "(+ (define a 4) 5))", "Error: Unexpected keyword at first list position.\n"

# VALID SYNTAX AST PRINTOUT
test_out "Test string", "\"spam eggs bacon sausage	and spam\"", "\"spam eggs bacon sausage	and spam\"\n"
test_out "Test symbol", "eggs", "eggs\nError: eggs is not defined.\n"
test_out "Test integer", "2048", "2048\n"
test_out "Test float", "2.71828", "2.71828\n"
test_out "Test true", "#t", "#t\n"
test_out "Test false", "#f", "#f\n"
test_out "Test null", "null", "null\n"
test_out "Test quoted keyword", "(quote if)", "quote:\n\tif\n"
test_out "Test quoted list", "(quote (1 2 3))", "quote:\n\tlist:\n\t\t1\n\t\t2\n\t\t3\n"
test_out "Test quoted, nested list", "(quote (1 (a (b \"c\")) 3))", "quote:\n\tlist:\n\t\t1\n\t\tlist:\n\t\t\ta\n\t\t\tlist:\n\t\t\t\tb\n\t\t\t\t\"c\"\n\t\t3\n"
test_out "Test function call", "(+ 2 5)", "call:\n\t+\n\tlist:\n\t\t2\n\t\t5\n"
test_out "Test nested function call", "(cons 1 (cons 2 (cons 3 null)))", "call:\n\tcons\n\tlist:\n\t\t1\n\t\tcall:\n\t\t\tcons\n\t\t\tlist:\n\t\t\t\t2\n\t\t\t\tcall:\n\t\t\t\t\tcons\n\t\t\t\t\tlist:\n\t\t\t\t\t\t3\n\t\t\t\t\t\tnull\n"
test_out "Test if expression", "(if (null? 1) null 1)", "if:\n\tcall:\n\t\tnull?\n\t\tlist:\n\t\t\t1\n\tnull\n\t1\n"
test_out "Test nested if expression", "(define a 16) (if (null? a) null (if (> a 9) (- a 10) a))", "define [var]:\n\ta\n\t16\nif:\n\tcall:\n\t\tnull?\n\t\tlist:\n\t\t\ta\n\tnull\n\tif:\n\t\tcall:\n\t\t\t>\n\t\t\tlist:\n\t\t\t\ta\n\t\t\t\t9\n\t\tcall:\n\t\t\t-\n\t\t\tlist:\n\t\t\t\ta\n\t\t\t\t10\n\t\ta\n"
test_out "Test lambda function", "(lambda (x y) (> x y))", "lambda:\n\tlist:\n\t\tx\n\t\ty\n\tlist:\n\t\tcall:\n\t\t\t>\n\t\t\tlist:\n\t\t\t\tx\n\t\t\t\ty\n"
test_out "Test passing lambda function in a call", "(define (filter l f) l) (filter (quote (1 2 3 4 5)) (lambda (x) (> x 4)))", "define [func]:\n\tfilter\n\tlist:\n\t\tl\n\t\tf\n\tlist:\n\t\tl\ncall:\n\tfilter\n\tlist:\n\t\tquote:\n\t\t\tlist:\n\t\t\t\t1\n\t\t\t\t2\n\t\t\t\t3\n\t\t\t\t4\n\t\t\t\t5\n\t\tlambda:\n\t\t\tlist:\n\t\t\t\tx\n\t\t\tlist:\n\t\t\t\tcall:\n\t\t\t\t\t>\n\t\t\t\t\tlist:\n\t\t\t\t\t\tx\n\t\t\t\t\t\t4\n"
test_out "Test calling lambda function in place", "((lambda (x y) (* x y)) 7 3)", "call:\n\tlambda:\n\t\tlist:\n\t\t\tx\n\t\t\ty\n\t\tlist:\n\t\t\tcall:\n\t\t\t\t*\n\t\t\t\tlist:\n\t\t\t\t\tx\n\t\t\t\t\ty\n\tlist:\n\t\t7\n\t\t3\n"
test_out "Test function definition (long form)", "(define foo (lambda (a b c) (+ a b c)))", "define [var]:\n\tfoo\n\tlambda:\n\t\tlist:\n\t\t\ta\n\t\t\tb\n\t\t\tc\n\t\tlist:\n\t\t\tcall:\n\t\t\t\t+\n\t\t\t\tlist:\n\t\t\t\t\ta\n\t\t\t\t\tb\n\t\t\t\t\tc\n"
test_out "Test function definition (short form)", "(define (foo a b c) (+ a b c))", "define [func]:\n\tfoo\n\tlist:\n\t\ta\n\t\tb\n\t\tc\n\tlist:\n\t\tcall:\n\t\t\t+\n\t\t\tlist:\n\t\t\t\ta\n\t\t\t\tb\n\t\t\t\tc\n"
test_out "Test variable definition", "(define sausage +) (define bacon (sausage 3.14 0 -1))", "define [var]:\n\tsausage\n\t+\ndefine [var]:\n\tbacon\n\tcall:\n\t\tsausage\n\t\tlist:\n\t\t\t3.14\n\t\t\t0\n\t\t\t-1\n"
test_out "Test let expression", "(define (python x y z) (display \"side\") (let ((a (+ x y)) (b (- y z))) (display \"effect\") (* a b)))", "define [func]:\n\tpython\n\tlist:\n\t\tx\n\t\ty\n\t\tz\n\tlist:\n\t\tcall:\n\t\t\tdisplay\n\t\t\tlist:\n\t\t\t\t\"side\"\n\t\tlet:\n\t\t\tlist:\n\t\t\t\tlist:\n\t\t\t\t\ta\n\t\t\t\t\tcall:\n\t\t\t\t\t\t+\n\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\ty\n\t\t\t\tlist:\n\t\t\t\t\tb\n\t\t\t\t\tcall:\n\t\t\t\t\t\t-\n\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\ty\n\t\t\t\t\t\t\tz\n\t\t\tlist:\n\t\t\t\tcall:\n\t\t\t\t\tdisplay\n\t\t\t\t\tlist:\n\t\t\t\t\t\t\"effect\"\n\t\t\t\tcall:\n\t\t\t\t\t*\n\t\t\t\t\tlist:\n\t\t\t\t\t\ta\n\t\t\t\t\t\tb\n"
test_out "Test let inside if", "(define (foo x y) (if (> x y) (let ((a (+ x y)) (b (* x y))) (- a b)) (let ((a (- x y)) (b (/ x y))) (+ a b))))", "define [func]:\n\tfoo\n\tlist:\n\t\tx\n\t\ty\n\tlist:\n\t\tif:\n\t\t\tcall:\n\t\t\t\t>\n\t\t\t\tlist:\n\t\t\t\t\tx\n\t\t\t\t\ty\n\t\t\tlet:\n\t\t\t\tlist:\n\t\t\t\t\tlist:\n\t\t\t\t\t\ta\n\t\t\t\t\t\tcall:\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\ty\n\t\t\t\t\tlist:\n\t\t\t\t\t\tb\n\t\t\t\t\t\tcall:\n\t\t\t\t\t\t\t*\n\t\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\ty\n\t\t\t\tlist:\n\t\t\t\t\tcall:\n\t\t\t\t\t\t-\n\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\ta\n\t\t\t\t\t\t\tb\n\t\t\tlet:\n\t\t\t\tlist:\n\t\t\t\t\tlist:\n\t\t\t\t\t\ta\n\t\t\t\t\t\tcall:\n\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\ty\n\t\t\t\t\tlist:\n\t\t\t\t\t\tb\n\t\t\t\t\t\tcall:\n\t\t\t\t\t\t\t/\n\t\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\ty\n\t\t\t\tlist:\n\t\t\t\t\tcall:\n\t\t\t\t\t\t+\n\t\t\t\t\t\tlist:\n\t\t\t\t\t\t\ta\n\t\t\t\t\t\t\tb\n"

#test_out "Test closure inside closure", "(define (foo a b) (lambda (bar c) (lambda (x) (+ a b c x))))"
